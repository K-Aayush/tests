generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String         @id @default(uuid())
  email                    String         @unique
  password                 String
  firstName                String?
  lastName                 String?
  middleName               String?
  phoneNumber              String?
  role                     String         @default("USER")
  isEmailVerified          Boolean        @default(false)
  emailVerificationToken   String?
  emailVerificationExpires DateTime?
  passwordResetToken       String?
  passwordResetExpires     DateTime?
  lastLogin                DateTime?
  refreshTokens            RefreshToken[]
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("refresh_tokens")
}

model EmailOTP {
  id        String   @id @default(uuid())
  email     String
  otp       String
  type      String // 'verification' or 'password_reset'
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("email_otps")
}

model Patient {
  id                  String                @id @default(cuid())
  identifier          Identifier[]
  active              Boolean               @default(true)
  firstName           String
  middleName          String?
  lastName            String
  preferredName       String?
  contactPointType    ContactPointSystem?
  contactPointValue   String?
  gender              AdministrativeGender?
  birthDate           DateTime?
  deceased            Boolean?
  address             Address[]
  maritalStatus       String?
  empi                String?
  generalPractitioner String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt

  @@map("patients")
}

model Identifier {
  id        String         @id @default(cuid())
  use       IdentifierUse?
  system    String?
  value     String
  type      String?
  patient   Patient        @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("identifiers")
}

model Address {
  id         String       @id @default(cuid())
  use        AddressUse?
  type       AddressType?
  text       String?
  line       String[]
  city       String?
  state      String?
  postalCode String?
  country    String?
  patient    Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId  String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@map("addresses")
}

enum AdministrativeGender {
  male
  female
  other
  unknown
}

enum ContactPointSystem {
  phone
  fax
  email
  sms
}

enum AddressType {
  postal
  physical
  both
}

enum AddressUse {
  home
  work
  temp
  old
  billing
}

enum IdentifierUse {
  usual
  official
  temp
  secondary
  old
}
