generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String         @id @default(uuid())
  email                    String         @unique
  password                 String
  firstName                String?
  lastName                 String?
  middleName               String?
  phoneNumber              String?
  role                     String         @default("USER")
  isEmailVerified          Boolean        @default(false)
  emailVerificationToken   String?
  emailVerificationExpires DateTime?
  passwordResetToken       String?
  passwordResetExpires     DateTime?
  lastLogin                DateTime?
  refreshTokens            RefreshToken[]
  loginSessions            LoginSession[]
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("refresh_tokens")
}

model LoginSession {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  jti       String   @unique // JWT ID for tracking
  iat       DateTime // Issued at time
  ipAddress String?
  userAgent String?
  isActive  Boolean  @default(true)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("login_sessions")
}

model EmailOTP {
  id        String   @id @default(uuid())
  email     String
  otp       String
  type      String // 'verification' or 'password_reset'
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("email_otps")
}

model OTPAttempt {
  id        String   @id @default(uuid())
  email     String
  type      String // 'verification' or 'password_reset'
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("otp_attempts")
}

model Patient {
  id                  String                @id @default(cuid())
  externalId          String                @unique @default(cuid())
  active              Boolean               @default(true)
  firstName           String
  middleName          String?
  lastName            String
  preferredName       String?
  contactPointType    ContactPointSystem?
  contactPointValue   String?
  gender              AdministrativeGender?
  birthDate           DateTime?
  deceased            Boolean?
  address             Address[]
  maritalStatus       String?
  empi                String?
  generalPractitioner String?
  deletedAt           DateTime? // Soft delete timestamp
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  appointments        Appointment[]

  @@map("patients")
}

model Appointment {
  id          String            @id @default(cuid())
  externalId  String            @unique @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  status      AppointmentStatus @default(scheduled)
  type        String?
  location    String?
  notes       String?
  patientId   String
  patient     Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
  providerId  String?
  deletedAt   DateTime? // Soft delete timestamp
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@map("appointments")
}

enum AppointmentStatus {
  scheduled
  confirmed
  in_progress
  completed
  cancelled
  no_show
}

model Identifier {
  id               String         @id @default(cuid())
  use              IdentifierUse?
  system           String?
  value            String
  type             String?
  identifiableId   String // Polymorphic foreign key
  identifiableType String // Type of the related model (e.g., 'Patient')
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@map("identifiers")
}

model Address {
  id              String       @id @default(cuid())
  use             AddressUse?
  type            AddressType?
  text            String?
  line            String[]
  city            String?
  state           String?
  postalCode      String?
  country         String?
  addressableId   String // Polymorphic foreign key
  addressableType String // Type of the related model (e.g., 'Patient')
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  Patient         Patient?     @relation(fields: [patientId], references: [id])
  patientId       String?

  @@map("addresses")
}

model KeyRotationLog {
  id        String   @id @default(uuid())
  version   String   @unique
  checksum  String // SHA-256 checksum of the key
  rotatedAt DateTime @default(now())
  rotatedBy String? // System or admin user ID
  isActive  Boolean  @default(true)
  expiresAt DateTime

  @@map("key_rotation_logs")
}

enum AdministrativeGender {
  male
  female
  other
  unknown
}

enum ContactPointSystem {
  phone
  fax
  email
  sms
}

enum AddressType {
  postal
  physical
  both
}

enum AddressUse {
  home
  work
  temp
  old
  billing
}

enum IdentifierUse {
  usual
  official
  temp
  secondary
  old
}
