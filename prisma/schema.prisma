generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String           @id @default(uuid())
  email                    String           @unique
  password                 String
  firstName                String?
  lastName                 String?
  isEmailVerified          Boolean          @default(false)
  emailVerificationToken   String?
  emailVerificationExpires DateTime?
  passwordResetToken       String?
  passwordResetExpires     DateTime?
  lastLogin                DateTime?
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  middleName               String?
  phoneNumber              String?
  authProvider             String           @default("email")
  firebaseUid              String?          @unique
  photoURL                 String?
  loginSessions            LoginSession[]
  refreshTokens            RefreshToken[]
  UserEntityLink           UserEntityLink[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model LoginSession {
  id        String   @id @default(uuid())
  userId    String
  jti       String   @unique
  iat       DateTime
  ipAddress String?
  userAgent String?
  isActive  Boolean  @default(true)
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_sessions")
}

model EmailOTP {
  id        String   @id @default(uuid())
  email     String
  otp       String
  type      String
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("email_otps")
}

model OTPAttempt {
  id        String   @id @default(uuid())
  email     String
  type      String
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("otp_attempts")
}

model Patient {
  id                  String                @id @default(cuid())
  active              Boolean               @default(true)
  firstName           String
  middleName          String?
  lastName            String
  preferredName       String?
  contactPointType    ContactPointSystem?
  contactPointValue   String?
  gender              AdministrativeGender?
  birthDate           DateTime?
  deceased            Boolean?
  maritalStatus       String?
  empi                String?
  generalPractitioner String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  deletedAt           DateTime?
  externalId          String                @unique @default(cuid())
  address             Address[]
  appointments        Appointment[]
  Condition           Condition[]
  Consent             Consent[]

  @@map("patients")
}

model Appointment {
  id          String            @id @default(cuid())
  externalId  String            @unique @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  status      AppointmentStatus @default(scheduled)
  type        String?
  location    String?
  notes       String?
  patientId   String
  providerId  String?
  deletedAt   DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  patient     Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

model Identifier {
  id               String         @id @default(cuid())
  use              IdentifierUse?
  system           String?
  value            String
  type             String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  identifiableId   String
  identifiableType String

  @@map("identifiers")
}

model Address {
  id              String       @id @default(cuid())
  use             AddressUse?
  type            AddressType?
  text            String?
  line            String[]
  city            String?
  state           String?
  postalCode      String?
  country         String?
  patientId       String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  addressableId   String
  addressableType String
  Patient         Patient?     @relation(fields: [patientId], references: [id])

  @@map("addresses")
}

model KeyRotationLog {
  id        String   @id @default(uuid())
  version   String   @unique
  checksum  String
  rotatedAt DateTime @default(now())
  rotatedBy String?
  isActive  Boolean  @default(true)
  expiresAt DateTime

  @@map("key_rotation_logs")
}

model Practitioner {
  id                 String      @id @default(uuid())
  firstName          String
  lastName           String
  middleName         String?
  prefix             String?
  suffix             String?
  npi                String?     @unique
  specialty          String?
  email              String?     @unique
  phone              String?
  address            Json?
  active             Boolean     @default(true)
  organizationId     String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  recordedConditions Condition[] @relation("ConditionRecorder")
  ownedTasks         Task[]      @relation("TaskOwner")
  requestedTasks     Task[]      @relation("TaskRequester")

  @@map("practitioners")
}

model Task {
  id                   String        @id @default(uuid())
  externalId           String        @unique @default(cuid())
  status               TaskStatus    @default(draft)
  intent               TaskIntent    @default(unknown)
  priority             TaskPriority? @default(routine)
  code                 String
  description          String?
  focusId              String?
  focusType            String?
  requesterId          String?
  ownerId              String?
  executionPeriodStart DateTime?
  executionPeriodEnd   DateTime?
  authoredOn           DateTime      @default(now())
  lastModified         DateTime      @updatedAt
  deletedAt            DateTime?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  owner                Practitioner? @relation("TaskOwner", fields: [ownerId], references: [id])
  requester            Practitioner? @relation("TaskRequester", fields: [requesterId], references: [id])

  @@map("tasks")
}

model Condition {
  id                 String                      @id @default(uuid())
  externalId         String                      @unique @default(cuid())
  clinicalStatus     ConditionClinicalStatus
  verificationStatus ConditionVerificationStatus
  category           ConditionCategory?
  severity           ConditionSeverity?
  code               String
  codeSystem         String?
  codeDisplay        String?
  subjectId          String
  encounterId        String?
  onsetDateTime      DateTime?
  recordedDate       DateTime                    @default(now())
  recordedBy         String?
  notes              String?
  deletedAt          DateTime?
  createdAt          DateTime                    @default(now())
  updatedAt          DateTime                    @updatedAt
  recorder           Practitioner?               @relation("ConditionRecorder", fields: [recordedBy], references: [id])
  subject            Patient                     @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@map("conditions")
}

model Consent {
  id               String          @id @default(uuid())
  externalId       String          @unique @default(cuid())
  status           ConsentStatus
  category         ConsentCategory
  patientId        String
  organizationId   String?
  dateTime         DateTime        @default(now())
  periodStart      DateTime?
  periodEnd        DateTime?
  provision        Json?
  sourceAttachment String?
  grantedBy        String?
  witnessedBy      String?
  scope            String?
  purpose          String[]
  deletedAt        DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  patient          Patient         @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("consents")
}

model UserEntityLink {
  id         String     @id @default(uuid())
  userId     String
  entityId   String
  entityType EntityType
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, entityId, entityType])
  @@map("user_entity_links")
}

enum AppointmentStatus {
  scheduled
  confirmed
  in_progress
  completed
  cancelled
  no_show
}

enum AdministrativeGender {
  male
  female
  other
  unknown
}

enum ContactPointSystem {
  phone
  fax
  email
  sms
}

enum AddressType {
  postal
  physical
  both
}

enum AddressUse {
  home
  work
  temp
  old
  billing
}

enum IdentifierUse {
  usual
  official
  temp
  secondary
  old
}

enum TaskStatus {
  draft
  requested
  received
  accepted
  rejected
  ready
  cancelled
  in_progress
  on_hold
  failed
  completed
  entered_in_error
}

enum TaskIntent {
  unknown
  proposal
  plan
  order
  original_order
  reflex_order
  filler_order
  instance_order
  option
}

enum TaskPriority {
  routine
  urgent
  asap
  stat
}

enum ConditionClinicalStatus {
  active
  recurrence
  relapse
  inactive
  remission
  resolved
}

enum ConditionVerificationStatus {
  unconfirmed
  provisional
  differential
  confirmed
  refuted
  entered_in_error
}

enum ConditionCategory {
  problem_list_item
  encounter_diagnosis
}

enum ConditionSeverity {
  mild
  moderate
  severe
}

enum ConsentStatus {
  draft
  proposed
  active
  rejected
  inactive
  entered_in_error
}

enum ConsentCategory {
  privacy
  treatment
  research
  advance_directive
  disclosure
}

enum EntityType {
  PATIENT
  PRACTITIONER
  ORGANIZATION
}
